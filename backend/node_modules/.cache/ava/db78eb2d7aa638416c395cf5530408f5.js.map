{"version":3,"sources":["applicant-test.js"],"names":["t","applicantToCreate","name","surname","location","interests","applications","creation","app","post","send","res","get","is","status","true","isArray","body","length","plan","deepEqual","applicantUserCreated","fetchRes","_id","applicantUserFetched","applicant","del","delete","text","fetch"],"mappings":"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","file":"applicant-test.js","sourcesContent":["import test from \"ava\"\nimport request from \"supertest\"\nimport app from \"../app\"\n\ntest ('Get list of applicants', async t => {\n    const applicantToCreate = { name: 'Elena', surname: 'Volovicheva', location: 'Berlin', interests: [], applications: [] }\n\n    const creation = await request(app)\n    .post('/applicant')\n    .send(applicantToCreate)\n\n    const res = await request(app).get('./applicant/all')\n\n    t.is(res.status, 200)\n    t.true(Array.isArray(res.body), \"Body should be an array\")\n    t.true(res.body.length > 0)\n})\n\ntest('Create a new applicant', async t => {\n    t.plan(6)\n\n    const applicantToCreate = { name: 'Elena', surname: 'Volovicheva', location: 'Berlin', interests: [], applications: [] }\n\n    const res = await request(app)\n    .post('/applicant')\n    .send(applicantToCreate)\n\n    t.is(res.status, 200)\n    t.deepEqual(res.body.name, applicantToCreate.name)\n    t.deepEqual(res.body.surname, applicantToCreate.surname)\n    t.deepEqual(res.body.location, applicantToCreate.location)\n    t.deepEqual(res.body.interests, applicantToCreate.interests)\n    t.deepEqual(res.body.applications, applicantToCreate.applications)\n})\n\ntest('Fetch an applicant', async t => {\n    t.plan(2)\n\n    const applicantToCreate = { name: 'Elena', surname: 'Volovicheva', location: 'Berlin', interests: [], applications: [] }\n\n    const applicantUserCreated = (await request(app)\n    .post('/applicant')\n    .send(applicantToCreate)).body\n\n    const fetchRes = await request(app).get(`/applicant/${applicantUserCreated._id}/json`)\n\n    const applicantUserFetched = fetchRes.body\n\n    t.is(fetchRes.status, 200)\n    t.deepEqual(applicantUserFetched, applicantUserCreated)\n})\n\ntest('Delete an applicant', async t => {\n    t.plan()\n\n    const applicant = (await request(app)\n    .post('/applicant')\n    .send({ name: 'Elena', surname: 'Volovicheva', location: 'Berlin', interests: [], applications: [] })).body\n\n    const del = await request(app).delete(`/applicant/${applicant._id}`)\n\n    t.is(del.status, 200)\n    t.is(text, \"ok!\")\n\n    const fetch = await request(app).get(`/applicant/${applicant._id}/json`)\n\n    t.is(fetch.status, 404)\n})"]}